package rc.demo.app.gateway.service;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.ConsoleHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.json.JSONObject;

import com.paytm.pg.merchant.CheckSumServiceHelper;

import rc.demo.app.LogMessageDecorator;
import rc.demo.app.gateway.paytm.models.Subscription;
import rc.demo.app.properties.ApplicationProperties;
import rc.demo.app.unmarshaller.JAXBUnMarshaller;

public class InitiateSubscriptionService implements PaymentGatewayService<Subscription> {

	private static final Logger LOGGER = Logger.getLogger(InitiateSubscriptionService.class.getName());

	private String customerId;

	private String orderId;

	private String transactionAmount;

	private String currency;

	private String subscriptionMaxAmount;

	private String subscriptionPaymentMode;

	private String subscriptionAmountType;

	private int subscriptionFrequency;

	private String subscriptionFrequencyUnit;

	private long subscriptionStartDate;

	private long subscriptionExpiryDate;

	private int subscriptionGraceDays;

	private int subscriptionEnableRetry;

	private int subscriptionRetryCount;

	public InitiateSubscriptionService(String orderId) {
		this.orderId = orderId;
	}

	public InitiateSubscriptionService(String customerId, String orderId, String transactionAmount, String currency,
			String subscriptionMaxAmount, String subscriptionPaymentMode, String subscriptionAmountType,
			int subscriptionFrequency, String subscriptionFrequencyUnit, long subscriptionStartDate,
			long subscriptionExpiryDate, int subscriptionGraceDays, int subscriptionEnableRetry,
			int subscriptionRetryCount) {

		this.customerId = customerId;
		this.orderId = orderId;
		this.transactionAmount = transactionAmount;
		this.currency = currency;
		this.subscriptionMaxAmount = subscriptionMaxAmount;
		this.subscriptionPaymentMode = subscriptionPaymentMode;
		this.subscriptionAmountType = subscriptionAmountType;
		this.subscriptionFrequency = subscriptionFrequency;
		this.subscriptionFrequencyUnit = subscriptionFrequencyUnit;
		this.subscriptionStartDate = subscriptionStartDate;
		this.subscriptionExpiryDate = subscriptionExpiryDate;
		this.subscriptionGraceDays = subscriptionGraceDays;
		this.subscriptionEnableRetry = subscriptionEnableRetry;
		this.subscriptionRetryCount = subscriptionRetryCount;
	}

	@Override
	public Subscription serve() {

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");

		/* initialize an object */
		JSONObject paytmParams = new JSONObject();

		JSONObject transactionAmount = new JSONObject();

		/*
		 * Amount paid by customer in INR. Transaction value to be provided in 2 decimal
		 * values 100.50
		 */
		transactionAmount.put("value", this.transactionAmount);

		/* Currency code (INR) */
		transactionAmount.put("currency", this.currency);

		JSONObject userInfo = new JSONObject();

		/*
		 * Unique reference ID for every customer which is generated by merchant Special
		 * characters allowed in Cust_ID are @, ! ,_ ,$, .
		 */
		userInfo.put("custId", this.customerId);

		JSONObject body = new JSONObject();

		/*
		 * This parameter is used to identify the transaction flow. For subscription,
		 * the value is “NATIVE_SUBSCRIPTION”.
		 */
		body.put("requestType", "NATIVE_SUBSCRIPTION");

		/* This is a unique identifier provided to every merchant by Paytm. */
		body.put("mid", ApplicationProperties.getMerchantId());

		/*
		 * This is provided by Paytm and it defines the static response URL.For staging
		 * environment: WEBSTAGING.
		 */
		body.put("websiteName", "WEBSTAGING");

		/*
		 * Unique reference ID for a transaction which is generated by merchant and sent
		 * in the request
		 */
		body.put("orderId", this.orderId);

		body.put("subscriptionPaymentMode", this.subscriptionPaymentMode);

		/*
		 * Renewal amount of subscription can be fixed or capped to max amount. Possible
		 * values are 1. FIX: Amount charged in all renewal transactions will be same as
		 * txnAmount 2. VARIABLE: Renewal amount can be variable and capped by
		 * subscriptionMaxAmount
		 */
		body.put("subscriptionAmountType", this.subscriptionAmountType);

		/*
		 * Maximum amount that can be deducted in a subscription request. Mandatory: if
		 * subscriptionAmountType is VARIABLE.
		 */
		body.put("subscriptionMaxAmount", this.subscriptionMaxAmount);

		/*
		 * Combined with subscriptionFrequencyUnit, defines the frequency of renewal
		 * transaction. If the renewal cycle is of 2 months, attribute values can be:
		 * subscriptionFrequency: 2, subscriptionFrequencyUnit : MONTH If the renewal
		 * cycle is of 15 days, attribute values can be : subscriptionFrequency: 15,
		 * subscriptionFrequencyUnit : DAY
		 */
		body.put("subscriptionFrequency", this.subscriptionFrequency);

		/*
		 * This, combined with interval, defines the frequency. The values supported for
		 * this attribute currently are: daily, weekly, monthly, and yearly. If the
		 * billing cycle is of 2 months, the value for this attribute would be monthly.
		 */
		body.put("subscriptionFrequencyUnit", this.subscriptionFrequencyUnit);

		/*
		 * This is the date when first renewal transaction can be charged to the
		 * customer. Subsequent renewals can be charged by customer after a definite
		 * period defined with subscriptionFrequency and subscriptionFrequencyUnit.
		 * Format of date is YYYY-MM-DD Mandatory if subscriptionGraceDays is sent in
		 * request.
		 */
		body.put("subscriptionStartDate", simpleDateFormat.format(new Date(this.subscriptionStartDate)));

		/*
		 * Date when subscription will expire. Renewal transactions will not be allowed
		 * after the expiry date. Format should be YYYY-MM-DD.
		 */
		body.put("subscriptionExpiryDate", simpleDateFormat.format(new Date(this.subscriptionExpiryDate)));

		/*
		 * Number of days after renewal cycle start date for which merchant can send
		 * renewal request. Mandatory if subscriptionStartDate is sent in request.
		 */
		body.put("subscriptionGraceDays", String.valueOf(this.subscriptionGraceDays));

		/*
		 * Merchant can retry a transaction in case of failure from bank/wallet Possible
		 * Value: 0 or 1.
		 */
		body.put("subscriptionEnableRetry", String.valueOf(this.subscriptionEnableRetry));

		/*
		 * Count of renewal retries allowed in case of failure renewal fails. In case
		 * grace days are not present : Retries are allowed on renewal date only In case
		 * grace days are present : Retries are allowed dates >= renewal date and <=
		 * Renewal Date + Grace days.
		 */
		body.put("subscriptionRetryCount", String.valueOf(this.subscriptionRetryCount));

		/*
		 * Paytm Token for a user. This will not be available for merchants outside
		 * Paytm ecosystem.
		 */
		body.put("paytmSsoToken", "");

		/*
		 * On completion of transaction, Paytm payment gateway will send the response on
		 * this URL.. Sample URL is - https://merchant.com/callback/
		 */
		body.put("callbackUrl", String.format(ApplicationProperties.getSubscriptionCallbackURL(), this.orderId));

		body.put("userInfo", userInfo);
		body.put("txnAmount", transactionAmount);

		JSONObject head = new JSONObject();

		/*
		 * ClientId by which key checksum is created, required to validate the checksum.
		 * Eg C11.
		 */
		head.put("clientId", "C11");

		/* version of the API. Current version is v1. */
		head.put("version", "v1");

		/* UNIX timestamp of the time request is being sent. */
		head.put("requestTimestamp", System.currentTimeMillis());

		/*
		 * For websites, the value is WEB and For Mobile websites/App, the value is WAP.
		 */
		head.put("channelId", "WEB");

		String checksum = "";
		try {
			checksum = CheckSumServiceHelper.getCheckSumServiceHelper()
					.genrateCheckSum(ApplicationProperties.getMerchantKey(), body.toString());
		} catch (Exception e) {
			LOGGER.log(Level.SEVERE, e.getMessage(), e);
		}

		/* Checksum string created by using Paytm checksum library. */
		head.put("signature", checksum);

		paytmParams.put("head", head);
		paytmParams.put("body", body);

		String post_data = paytmParams.toString();

		LOGGER.info(String.format("REQUST DATA : %s", post_data));

		/* for Staging */
		URL url = null;
		try {
			url = new URL(String.format(ApplicationProperties.getInitiateSubscriptionAPIEndPoint(),
					ApplicationProperties.getMerchantId(), this.orderId));
		} catch (MalformedURLException e) {
			LOGGER.log(Level.SEVERE, e.getMessage(), e);
		}
		/* for Production */
		// URL url = new
		// URL("https://securegw.paytm.in/subscription/create?mid=<mid>&orderId=<orderId>");

		try {
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Content-Type", "application/json");
			connection.setDoOutput(true);

			DataOutputStream requestWriter = new DataOutputStream(connection.getOutputStream());

			requestWriter.writeBytes(post_data);
			requestWriter.close();
			String responseData = "";
			InputStream is = connection.getInputStream();
			BufferedReader responseReader = new BufferedReader(new InputStreamReader(is));
			if ((responseData = responseReader.readLine()) != null) {
				LOGGER.info(String.format("RESPONSE DATA : %s", responseData));
			}
			responseReader.close();

			String paytmSubscriptionString = String.format("{\"%s\":%s}", "paytm-subscription", responseData);
			LOGGER.info(LogMessageDecorator
					.decorateInfo(String.format("PAYTM INITIATE SUBSRIPTION STRING : %s", paytmSubscriptionString)));

			JAXBUnMarshaller<Subscription> jaxbUnMarshaller = new JAXBUnMarshaller<>();
			return jaxbUnMarshaller.unMarshall(paytmSubscriptionString, Subscription.class);

		} catch (Exception e) {
			LOGGER.log(Level.SEVERE, e.getMessage(), e);
			return null;
		}
	}
	
	static {
		Handler handlerObj = new ConsoleHandler();
		handlerObj.setLevel(Level.ALL);
		LOGGER.addHandler(handlerObj);
		LOGGER.setLevel(Level.ALL);
		LOGGER.setUseParentHandlers(false);
	}
}
